/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Diem Dev API Specification
 * Diem Dev API is REST API for client applications to interact the Diem blockchain.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import {Event, EventFromJSON, EventToJSON} from "../models";

export interface GetEventsByEventHandleRequest {
  address: string;
  eventHandleStruct: string;
  fieldName: string;
}

export interface GetEventsByEventKeyRequest {
  eventKey: string;
}

/**
 *
 */
export class EventsApi extends runtime.BaseAPI {
  /**
   * This API extracts event key from the account resource identified by the `event_handle_struct` and `field_name`, then returns events identified by the event key.
   * Get events by event handle
   */
  async getEventsByEventHandleRaw(
    requestParameters: GetEventsByEventHandleRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Event>>> {
    if (
      requestParameters.address === null ||
      requestParameters.address === undefined
    ) {
      throw new runtime.RequiredError(
        "address",
        "Required parameter requestParameters.address was null or undefined when calling getEventsByEventHandle.",
      );
    }

    if (
      requestParameters.eventHandleStruct === null ||
      requestParameters.eventHandleStruct === undefined
    ) {
      throw new runtime.RequiredError(
        "eventHandleStruct",
        "Required parameter requestParameters.eventHandleStruct was null or undefined when calling getEventsByEventHandle.",
      );
    }

    if (
      requestParameters.fieldName === null ||
      requestParameters.fieldName === undefined
    ) {
      throw new runtime.RequiredError(
        "fieldName",
        "Required parameter requestParameters.fieldName was null or undefined when calling getEventsByEventHandle.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/accounts/{address}/events/{event_handle_struct}/{field_name}`
          .replace(
            `{${"address"}}`,
            encodeURIComponent(String(requestParameters.address)),
          )
          .replace(
            `{${"event_handle_struct"}}`,
            encodeURIComponent(String(requestParameters.eventHandleStruct)),
          )
          .replace(
            `{${"field_name"}}`,
            encodeURIComponent(String(requestParameters.fieldName)),
          ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(EventFromJSON),
    );
  }

  /**
   * This API extracts event key from the account resource identified by the `event_handle_struct` and `field_name`, then returns events identified by the event key.
   * Get events by event handle
   */
  async getEventsByEventHandle(
    requestParameters: GetEventsByEventHandleRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<Event>> {
    const response = await this.getEventsByEventHandleRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get events by event key
   */
  async getEventsByEventKeyRaw(
    requestParameters: GetEventsByEventKeyRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Event>>> {
    if (
      requestParameters.eventKey === null ||
      requestParameters.eventKey === undefined
    ) {
      throw new runtime.RequiredError(
        "eventKey",
        "Required parameter requestParameters.eventKey was null or undefined when calling getEventsByEventKey.",
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/events/{event_key}`.replace(
          `{${"event_key"}}`,
          encodeURIComponent(String(requestParameters.eventKey)),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(EventFromJSON),
    );
  }

  /**
   * Get events by event key
   */
  async getEventsByEventKey(
    requestParameters: GetEventsByEventKeyRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<Event>> {
    const response = await this.getEventsByEventKeyRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
