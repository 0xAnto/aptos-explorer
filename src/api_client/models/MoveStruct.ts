/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Diem Dev API Specification
 * Diem Dev API is REST API for client applications to interact the Diem blockchain.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists, mapValues} from "../runtime";
import {
  MoveAbility,
  MoveAbilityFromJSON,
  MoveAbilityFromJSONTyped,
  MoveAbilityToJSON,
} from "./MoveAbility";
import {
  MoveStructField,
  MoveStructFieldFromJSON,
  MoveStructFieldFromJSONTyped,
  MoveStructFieldToJSON,
} from "./MoveStructField";
import {
  MoveStructGenericTypeParams,
  MoveStructGenericTypeParamsFromJSON,
  MoveStructGenericTypeParamsFromJSONTyped,
  MoveStructGenericTypeParamsToJSON,
} from "./MoveStructGenericTypeParams";

/**
 *
 * @export
 * @interface MoveStruct
 */
export interface MoveStruct {
  /**
   *
   * @type {string}
   * @memberof MoveStruct
   */
  name: string;
  /**
   *
   * @type {boolean}
   * @memberof MoveStruct
   */
  isNative: boolean;
  /**
   *
   * @type {Array<MoveAbility>}
   * @memberof MoveStruct
   */
  abilities: Array<MoveAbility>;
  /**
   *
   * @type {Array<MoveStructGenericTypeParams>}
   * @memberof MoveStruct
   */
  genericTypeParams: Array<MoveStructGenericTypeParams>;
  /**
   *
   * @type {Array<MoveStructField>}
   * @memberof MoveStruct
   */
  fields: Array<MoveStructField>;
}

export function MoveStructFromJSON(json: any): MoveStruct {
  return MoveStructFromJSONTyped(json, false);
}

export function MoveStructFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): MoveStruct {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json["name"],
    isNative: json["is_native"],
    abilities: ((json["abilities"] as Array<any>) || []).map(
      MoveAbilityFromJSON,
    ),
    genericTypeParams: ((json["generic_type_params"] as Array<any>) || []).map(
      MoveStructGenericTypeParamsFromJSON,
    ),
    fields: ((json["fields"] as Array<any>) || []).map(MoveStructFieldFromJSON),
  };
}

export function MoveStructToJSON(value?: MoveStruct | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    is_native: value.isNative,
    abilities: ((value.abilities as Array<any>) || []).map(MoveAbilityToJSON),
    generic_type_params: ((value.genericTypeParams as Array<any>) || []).map(
      MoveStructGenericTypeParamsToJSON,
    ),
    fields: ((value.fields as Array<any>) || []).map(MoveStructFieldToJSON),
  };
}
