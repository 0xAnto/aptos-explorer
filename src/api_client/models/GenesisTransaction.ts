/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Diem Dev API Specification
 * Diem Dev API is REST API for client applications to interact the Diem blockchain.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists, mapValues} from "../runtime";
import {Event, EventFromJSON, EventFromJSONTyped, EventToJSON} from "./Event";
import {
  GenesisTransactionAllOf,
  GenesisTransactionAllOfFromJSON,
  GenesisTransactionAllOfFromJSONTyped,
  GenesisTransactionAllOfToJSON,
} from "./GenesisTransactionAllOf";
import {
  OnChainTransactionInfo,
  OnChainTransactionInfoFromJSON,
  OnChainTransactionInfoFromJSONTyped,
  OnChainTransactionInfoToJSON,
} from "./OnChainTransactionInfo";
import {
  WriteSetPayload,
  WriteSetPayloadFromJSON,
  WriteSetPayloadFromJSONTyped,
  WriteSetPayloadToJSON,
} from "./WriteSetPayload";

/**
 *
 * @export
 * @interface GenesisTransaction
 */
export interface GenesisTransaction {
  /**
   *
   * @type {string}
   * @memberof GenesisTransaction
   */
  type: string;
  /**
   *
   * @type {Array<Event>}
   * @memberof GenesisTransaction
   */
  events: Array<Event>;
  /**
   *
   * @type {WriteSetPayload}
   * @memberof GenesisTransaction
   */
  payload: WriteSetPayload;
  /**
   * Unsiged int64 type value
   * @type {string}
   * @memberof GenesisTransaction
   */
  version: string;
  /**
   * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
   * two hex digits per byte.
   *
   * Different with `Address` type, hex-encoded bytes should not trim any zeros.
   * @type {string}
   * @memberof GenesisTransaction
   */
  hash: string;
  /**
   * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
   * two hex digits per byte.
   *
   * Different with `Address` type, hex-encoded bytes should not trim any zeros.
   * @type {string}
   * @memberof GenesisTransaction
   */
  stateRootHash: string;
  /**
   * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
   * two hex digits per byte.
   *
   * Different with `Address` type, hex-encoded bytes should not trim any zeros.
   * @type {string}
   * @memberof GenesisTransaction
   */
  eventRootHash: string;
  /**
   * Unsiged int64 type value
   * @type {string}
   * @memberof GenesisTransaction
   */
  gasUsed: string;
  /**
   * Transaction execution result (success: true, failure: false).
   * See `vm_status` for human readable error message from Diem VM.
   * @type {boolean}
   * @memberof GenesisTransaction
   */
  success: boolean;
  /**
   * Human readable transaction execution result message from Diem VM.
   * @type {string}
   * @memberof GenesisTransaction
   */
  vmStatus: string;
  /**
   * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
   * two hex digits per byte.
   *
   * Different with `Address` type, hex-encoded bytes should not trim any zeros.
   * @type {string}
   * @memberof GenesisTransaction
   */
  accumulatorRootHash: string;
  changes: Array<any>
  /**
  * Changes that occurred on a transaction
  * @type {any}
  * @memberof BlockMetadataTransaction
  */
}

export function GenesisTransactionFromJSON(json: any): GenesisTransaction {
  return GenesisTransactionFromJSONTyped(json, false);
}

export function GenesisTransactionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): GenesisTransaction {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json["type"],
    events: ((json["events"] as Array<any>) || []).map(EventFromJSON),
    payload: WriteSetPayloadFromJSON(json["payload"]),
    version: json["version"],
    hash: json["hash"],
    stateRootHash: json["state_root_hash"],
    eventRootHash: json["event_root_hash"],
    gasUsed: json["gas_used"],
    success: json["success"],
    vmStatus: json["vm_status"],
    accumulatorRootHash: json["accumulator_root_hash"],
    changes: json["changes"],
  };
}

export function GenesisTransactionToJSON(
  value?: GenesisTransaction | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    events: ((value.events as Array<any>) || []).map(EventToJSON),
    payload: WriteSetPayloadToJSON(value.payload),
    version: value.version,
    hash: value.hash,
    state_root_hash: value.stateRootHash,
    event_root_hash: value.eventRootHash,
    gas_used: value.gasUsed,
    success: value.success,
    vm_status: value.vmStatus,
    accumulator_root_hash: value.accumulatorRootHash,
    changes: value.changes
  };
}
