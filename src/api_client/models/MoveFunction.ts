/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Diem Dev API Specification
 * Diem Dev API is REST API for client applications to interact the Diem blockchain. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MoveFunctionGenericTypeParams,
    MoveFunctionGenericTypeParamsFromJSON,
    MoveFunctionGenericTypeParamsFromJSONTyped,
    MoveFunctionGenericTypeParamsToJSON,
} from './MoveFunctionGenericTypeParams';

/**
 * 
 * @export
 * @interface MoveFunction
 */
export interface MoveFunction {
    /**
     * Move function name
     * @type {string}
     * @memberof MoveFunction
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MoveFunction
     */
    visibility: MoveFunctionVisibilityEnum;
    /**
     * 
     * @type {Array<MoveFunctionGenericTypeParams>}
     * @memberof MoveFunction
     */
    genericTypeParams: Array<MoveFunctionGenericTypeParams>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MoveFunction
     */
    params: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MoveFunction
     */
    _return: Array<string>;
}

/**
* @export
* @enum {string}
*/
export enum MoveFunctionVisibilityEnum {
    Public = 'public',
    Script = 'script',
    Friend = 'friend'
}

export function MoveFunctionFromJSON(json: any): MoveFunction {
    return MoveFunctionFromJSONTyped(json, false);
}

export function MoveFunctionFromJSONTyped(json: any, ignoreDiscriminator: boolean): MoveFunction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'visibility': json['visibility'],
        'genericTypeParams': ((json['generic_type_params'] as Array<any> || []).map(MoveFunctionGenericTypeParamsFromJSON)),
        'params': json['params'],
        '_return': json['return'],
    };
}

export function MoveFunctionToJSON(value?: MoveFunction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'visibility': value.visibility,
        'generic_type_params': ((value.genericTypeParams as Array<any> || []).map(MoveFunctionGenericTypeParamsToJSON)),
        'params': value.params,
        'return': value._return,
    };
}

