/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Diem Dev API Specification
 * Diem Dev API is REST API for client applications to interact the Diem blockchain. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PendingTransactionAllOf,
    PendingTransactionAllOfFromJSON,
    PendingTransactionAllOfFromJSONTyped,
    PendingTransactionAllOfToJSON,
} from './PendingTransactionAllOf';
import {
    TransactionPayload,
    TransactionPayloadFromJSON,
    TransactionPayloadFromJSONTyped,
    TransactionPayloadToJSON,
} from './TransactionPayload';
import {
    TransactionSignature,
    TransactionSignatureFromJSON,
    TransactionSignatureFromJSONTyped,
    TransactionSignatureToJSON,
} from './TransactionSignature';
import {
    UserTransactionRequest,
    UserTransactionRequestFromJSON,
    UserTransactionRequestFromJSONTyped,
    UserTransactionRequestToJSON,
} from './UserTransactionRequest';
import {
    UserTransactionSignature,
    UserTransactionSignatureFromJSON,
    UserTransactionSignatureFromJSONTyped,
    UserTransactionSignatureToJSON,
} from './UserTransactionSignature';

/**
 * 
 * @export
 * @interface PendingTransaction
 */
export interface PendingTransaction {
    /**
     * 
     * @type {string}
     * @memberof PendingTransaction
     */
    type: string;
    /**
     * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
     * two hex digits per byte.
     * 
     * Different with `Address` type, hex-encoded bytes should not trim any zeros.
     * @type {string}
     * @memberof PendingTransaction
     */
    hash: string;
    /**
     * Hex-encoded 16 bytes Diem account address.
     * 
     * Prefixed with `0x` and leading zeros are trimmed.
     * 
     * See [doc](https://diem.github.io/move/address.html) for more details.
     * @type {string}
     * @memberof PendingTransaction
     */
    sender: string;
    /**
     * Unsiged int64 type value
     * @type {string}
     * @memberof PendingTransaction
     */
    sequenceNumber: string;
    /**
     * Unsiged int64 type value
     * @type {string}
     * @memberof PendingTransaction
     */
    maxGasAmount: string;
    /**
     * Unsiged int64 type value
     * @type {string}
     * @memberof PendingTransaction
     */
    gasUnitPrice: string;
    /**
     * 
     * @type {string}
     * @memberof PendingTransaction
     */
    gasCurrencyCode: string;
    /**
     * Timestamp in seconds, e.g. transaction expiration timestamp.
     * @type {string}
     * @memberof PendingTransaction
     */
    expirationTimestampSecs: string;
    /**
     * 
     * @type {TransactionPayload}
     * @memberof PendingTransaction
     */
    payload: TransactionPayload;
    /**
     * 
     * @type {TransactionSignature}
     * @memberof PendingTransaction
     */
    signature: TransactionSignature;
}

export function PendingTransactionFromJSON(json: any): PendingTransaction {
    return PendingTransactionFromJSONTyped(json, false);
}

export function PendingTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): PendingTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'hash': json['hash'],
        'sender': json['sender'],
        'sequenceNumber': json['sequence_number'],
        'maxGasAmount': json['max_gas_amount'],
        'gasUnitPrice': json['gas_unit_price'],
        'gasCurrencyCode': json['gas_currency_code'],
        'expirationTimestampSecs': json['expiration_timestamp_secs'],
        'payload': TransactionPayloadFromJSON(json['payload']),
        'signature': TransactionSignatureFromJSON(json['signature']),
    };
}

export function PendingTransactionToJSON(value?: PendingTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'hash': value.hash,
        'sender': value.sender,
        'sequence_number': value.sequenceNumber,
        'max_gas_amount': value.maxGasAmount,
        'gas_unit_price': value.gasUnitPrice,
        'gas_currency_code': value.gasCurrencyCode,
        'expiration_timestamp_secs': value.expirationTimestampSecs,
        'payload': TransactionPayloadToJSON(value.payload),
        'signature': TransactionSignatureToJSON(value.signature),
    };
}

