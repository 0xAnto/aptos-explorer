/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Diem Dev API Specification
 * Diem Dev API is REST API for client applications to interact the Diem blockchain. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BlockMetadataTransactionAllOf,
    BlockMetadataTransactionAllOfFromJSON,
    BlockMetadataTransactionAllOfFromJSONTyped,
    BlockMetadataTransactionAllOfToJSON,
} from './BlockMetadataTransactionAllOf';
import {
    OnChainTransactionInfo,
    OnChainTransactionInfoFromJSON,
    OnChainTransactionInfoFromJSONTyped,
    OnChainTransactionInfoToJSON,
} from './OnChainTransactionInfo';

/**
 * 
 * @export
 * @interface BlockMetadataTransaction
 */
export interface BlockMetadataTransaction {
    /**
     * 
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    type: string;
    /**
     * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
     * two hex digits per byte.
     * 
     * Different with `Address` type, hex-encoded bytes should not trim any zeros.
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    id: string;
    /**
     * Unsiged int64 type value
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    round: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BlockMetadataTransaction
     */
    previousBlockVotes: Array<string>;
    /**
     * Hex-encoded 16 bytes Diem account address.
     * 
     * Prefixed with `0x` and leading zeros are trimmed.
     * 
     * See [doc](https://diem.github.io/move/address.html) for more details.
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    proposer: string;
    /**
     * Timestamp in microseconds, e.g. ledger / block creation timestamp.
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    timestamp: string;
    /**
     * Unsiged int64 type value
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    version: string;
    /**
     * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
     * two hex digits per byte.
     * 
     * Different with `Address` type, hex-encoded bytes should not trim any zeros.
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    hash: string;
    /**
     * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
     * two hex digits per byte.
     * 
     * Different with `Address` type, hex-encoded bytes should not trim any zeros.
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    stateRootHash: string;
    /**
     * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
     * two hex digits per byte.
     * 
     * Different with `Address` type, hex-encoded bytes should not trim any zeros.
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    eventRootHash: string;
    /**
     * Unsiged int64 type value
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    gasUsed: string;
    /**
     * Transaction execution result (success: true, failure: false).
     * See `vm_status` for human readable error message from Diem VM.
     * @type {boolean}
     * @memberof BlockMetadataTransaction
     */
    success: boolean;
    /**
     * Human readable transaction execution result message from Diem VM.
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    vmStatus: string;
    /**
     * All bytes data are represented as hex-encoded string prefixed with `0x` and fulfilled with
     * two hex digits per byte.
     * 
     * Different with `Address` type, hex-encoded bytes should not trim any zeros.
     * @type {string}
     * @memberof BlockMetadataTransaction
     */
    accumulatorRootHash: string;
}

export function BlockMetadataTransactionFromJSON(json: any): BlockMetadataTransaction {
    return BlockMetadataTransactionFromJSONTyped(json, false);
}

export function BlockMetadataTransactionFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockMetadataTransaction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'id': json['id'],
        'round': json['round'],
        'previousBlockVotes': json['previous_block_votes'],
        'proposer': json['proposer'],
        'timestamp': json['timestamp'],
        'version': json['version'],
        'hash': json['hash'],
        'stateRootHash': json['state_root_hash'],
        'eventRootHash': json['event_root_hash'],
        'gasUsed': json['gas_used'],
        'success': json['success'],
        'vmStatus': json['vm_status'],
        'accumulatorRootHash': json['accumulator_root_hash'],
    };
}

export function BlockMetadataTransactionToJSON(value?: BlockMetadataTransaction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'id': value.id,
        'round': value.round,
        'previous_block_votes': value.previousBlockVotes,
        'proposer': value.proposer,
        'timestamp': value.timestamp,
        'version': value.version,
        'hash': value.hash,
        'state_root_hash': value.stateRootHash,
        'event_root_hash': value.eventRootHash,
        'gas_used': value.gasUsed,
        'success': value.success,
        'vm_status': value.vmStatus,
        'accumulator_root_hash': value.accumulatorRootHash,
    };
}

